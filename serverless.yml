service: vrc-video-api

frameworkVersion: '2'

plugins:
  - serverless-python-requirements

custom:
  gss_api_url: ${env:GSS_API_URL}
  vrc_video_table: ${self:service}-${opt:stage}-table
  pythonRequirements:
    dockerizePip: true
    dockerImage: lambci/lambda:build-python3.8
    useStaticCache: false
    useDownloadCache: false

provider:
  name: aws
  runtime: python3.8
  provider: ${opt:stage}
  lambdaHashingVersion: 20201221
  region: ap-northeast-1
  role: ${env:LAMBDA_IAM}
  timeout: 30
  tracing:
    apiGateway: true
    lambda: true

package:
  individually: true
  exclude:
    - node_modules/**
    - .gitignore
    - package-lock.json
    - requirements.txt
    - serverless.yml
    - .env

functions:
  # スプレッドシート用
  main:
    handler: handler.main
    package:
      include:
        - handler.py
      exclude:
        - src/**
    environment:
      GSS_API_URL: ${self:custom.gss_api_url}
    events:
      - http:
          path: /api/video
          method: get
          cors: true
  # ユーザ作成
  post_user_register:
    handler: src/lambda/post_user_register/handler.main
    package:
      include:
        - src/lambda/post_user_register/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /user/register
          method: post
          cors: true
  # video初回登録
  post_users_video_register:
    handler: src/lambda/post_users_video_register/handler.main
    package:
      include:
        - src/lambda/post_users_video_register/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /users/{user_id}/video/register
          method: post
          cors: true
  # Video取得
  get_users_video:
    handler: src/lambda/get_users_video/handler.main
    package:
      include:
        - src/lambda/get_users_video/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /users/{user_id}/video
          method: get
          cors: true
  # Video更新
  post_users_video:
    handler: src/lambda/post_users_video/handler.main
    package:
      include:
        - src/lambda/post_users_video/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /users/{user_id}/video
          method: post
          cors: true
  # ユーザのビデオ一覧を取得
  get_users_allvideo:
    handler: src/lambda/get_users_allvideo/handler.main
    package:
      include:
        - src/lambda/get_users_allvideo/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /users/{user_id}/video/all
          method: get
          cors: true

resources:
  Resources:
    vrcVideoTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.vrc_video_table}
        AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: video_id
          AttributeType: S
        KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: video_id
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1