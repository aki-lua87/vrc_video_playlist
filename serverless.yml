service: vrc-video-api

frameworkVersion: '2'

plugins:
  - serverless-python-requirements

custom:
  gss_api_url: ${env:GSS_API_URL}
  my_url: https://vrc.akakitune87.net
  video_list_url: http://net.akakitune87.public.s3-website-ap-northeast-1.amazonaws.com
  vrc_video_table: ${self:service}-${opt:stage}-table
  pythonRequirements:
    dockerizePip: true
    dockerImage: lambci/lambda:build-python3.8
    useStaticCache: false
    useDownloadCache: false

provider:
  name: aws
  runtime: python3.8
  provider: ${opt:stage}
  lambdaHashingVersion: 20201221
  region: ap-northeast-1
  role: ${env:LAMBDA_IAM}
  timeout: 30
  logRetentionInDays: 14
  tracing:
    apiGateway: true
    lambda: true

package:
  individually: true
  exclude:
    - node_modules/**
    - doc/**
    - .gitignore
    - package-lock.json
    - requirements.txt
    - serverless.yml
    - .env

functions:
  # ユーザ作成API
  post_user_register:
    handler: src/lambda/post_user_register/handler.main
    package:
      include:
        - src/lambda/post_user_register/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
      VIDEO_LIST_URL: ${self:custom.video_list_url}
    events:
      - http:
          path: /user/register
          method: post
          cors: true
  # video初回登録API
  post_users_video_register:
    handler: src/lambda/post_users_video_register/handler.main
    package:
      include:
        - src/lambda/post_users_video_register/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
      MY_URL: ${self:custom.my_url}
    events:
      - http:
          path: /users/{user_id}/video/register
          method: post
          cors: true
  # Video取得API(仕様書未記載)
  get_users_video:
    handler: src/lambda/get_users_video/handler.main
    package:
      include:
        - src/lambda/get_users_video/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /users/{user_id}/videos/{video_id}
          method: get
          cors: true
      - http:
          path: /users/{user_id}/videos/{video_id}
          method: head
  # Video更新API
  post_users_video:
    handler: src/lambda/post_users_video/handler.main
    package:
      include:
        - src/lambda/post_users_video/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
      MY_URL: ${self:custom.my_url}
    events:
      - http:
          path: /users/{user_id}/videos/{video_id}
          method: post
          cors: true
  # Video削除API
  delete_users_video:
    handler: src/lambda/delete_users_video/handler.main
    package:
      include:
        - src/lambda/delete_users_video/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /users/{user_id}/videos/{video_id}
          method: delete
          cors: true
  # ユーザのビデオ一覧を取得API
  get_users_allvideo:
    handler: src/lambda/get_users_allvideo/handler.main
    package:
      include:
        - src/lambda/get_users_allvideo/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /users/{user_id}/video/all
          method: get
          cors: true
  # ビデオリスト作成batch (外部APIコールbatch)
  batch_create_video_list:
    handler: src/lambda/batch_create_video_list/handler.main
    timeout: 600
    package:
      include:
        - src/lambda/batch_create_video_list/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - schedule: cron(35 * * * ? *)
  # ビデオリスト動画取得API TODO: 
  # ビデオ自動更新登録API
  post_video_update_register:
    handler: src/lambda/post_video_update_register/handler.main
    package:
      include:
        - src/lambda/post_video_update_register/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /users/{user_id}/videos/{video_id}/update
          method: post
          cors: true
  # ビデオ自動更新batch
  batch_video_update:
    handler: src/lambda/batch_video_update/handler.main
    timeout: 600
    package:
      include:
        - src/lambda/batch_video_update/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - schedule: cron(30 * * * ? *)
  # カレントビデオリスト切り替え(一身上の都合によりGET)
  get_users_current_video_update:
    handler: src/lambda/get_users_current_video_update/handler.main
    package:
      include:
        - src/lambda/get_users_current_video_update/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          # 動画を返したい -> バイナリを返したい -> 非LambdaProxy
          integration: lambda
          path: /users/{user_id}/video/current/change/{vid}
          method: get
          response:
            headers:
              Content-Type: "'binary/octet-stream'"
            contentHandling: CONVERT_TO_BINARY
  # カレントビデオ取得(仕様書未記載)
  get_users_current_video:
    handler: src/lambda/get_users_current_video/handler.main
    package:
      include:
        - src/lambda/get_users_current_video/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /users/{user_id}/video/current
          method: get
          cors: true
      - http:
          path: /users/{user_id}/video/current
          method: head
  # カレントビデオリスト取得
  get_users_current_video_list:
    handler: src/lambda/get_users_current_video_list/handler.main
    package:
      include:
        - src/lambda/get_users_current_video_list/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /users/{user_id}/video/current/list
          method: get
          cors: true

resources:
  Resources:
    vrcVideoTable:
      Type: 'AWS::DynamoDB::Table'
      Properties:
        TableName: ${self:custom.vrc_video_table}
        AttributeDefinitions:
        - AttributeName: user_id
          AttributeType: S
        - AttributeName: video_id
          AttributeType: S
        KeySchema:
        - AttributeName: user_id
          KeyType: HASH
        - AttributeName: video_id
          KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1