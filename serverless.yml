service: vrc-video-api

frameworkVersion: "2"

plugins:
  - serverless-python-requirements

custom:
  s3_bucket: ${env:S3_PUBLIC_BUCKET}
  contents_bucket: ${self:service}-${opt:stage}-bucket
  # gss_api_url: ${env:GSS_API_URL}
  my_url: https://vrc.akakitune87.net
  video_list_url: http://net.akakitune87.public.s3-website-ap-northeast-1.amazonaws.com
  vrc_video_table: ${self:service}-${opt:stage}-table
  pythonRequirements:
    dockerizePip: true
    dockerImage: lambci/lambda:build-python3.8
    useStaticCache: false
    useDownloadCache: false
  # deploymentBucket:
  #   name: "net.akakitune87.deploymentBucket"

provider:
  name: aws
  runtime: python3.8
  provider: ${opt:stage}
  lambdaHashingVersion: 20201221
  region: ap-northeast-1
  role: ${env:LAMBDA_IAM}
  timeout: 30
  logRetentionInDays: 14
  tracing:
    apiGateway: true
    lambda: true

package:
  individually: true
  exclude:
    - node_modules/**
    - doc/**
    - .gitignore
    - package-lock.json
    - requirements.txt
    - serverless.yml
    - .env
    - memo.txt

layers:
  utilsLayer:
    path: src/layers
    name: ${opt:stage}-${self:service}-utilsLayer
    description: utils
    compatibleRuntimes:
      - python3.8

functions:
  # 登録
  post_yt_channel_regist:
    handler: src/lambda/post_yt_channel_regist/handler.main
    package:
      include:
        - src/lambda/post_yt_channel_regist/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    layers:
      - { Ref: UtilsLayerLambdaLayer }
    events:
      - http:
          path: /video/yt/channel/regist
          method: post
          cors: true
  # 動画取得
  get_yt_channel:
    handler: src/lambda/get_yt_channel/handler.main
    package:
      include:
        - src/lambda/get_yt_channel/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    layers:
      - { Ref: UtilsLayerLambdaLayer }
    events:
      - http:
          # ?n=n
          path: /videos/yt/ch/{channel_id}
          method: get
          cors: true
      - http:
          path: /videos/yt/ch/{channel_id}
          method: head
          cors: true
  # リスト取得
  get_yt_channel_list:
    handler: src/lambda/get_yt_channel_list/handler.main
    timeout: 30
    package:
      include:
        - src/lambda/get_yt_channel_list/handler.py
      exclude:
        - src/**
    environment:
      S3_PUBLIC_BUCKET: ${self:custom.s3_bucket}
      CF_DOMAIN:
        Fn::Join:
          - ""
          - - "https://"
            - Fn::GetAtt:
                - ContentsCloudFront
                - DomainName
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    layers:
      - { Ref: UtilsLayerLambdaLayer }
    events:
      # 非LambdaProxy
      # - http:
      #     integration: lambda
      #     path: /videos/yt/chlist/{channel_id}
      #     method: get
      #     response:
      #       headers:
      #         Content-Type: "'binary/octet-stream'"
      #       contentHandling: CONVERT_TO_BINARY
      - http:
          path: /videos/yt/chlist/{channel_id}
          method: head
          cors: true
      - http:
          path: /videos/yt/chlist/{channel_id}
          method: get
          cors: true
  # yt channel自動更新batch
  batch_yt_channel_video_update:
    handler: src/lambda/batch_yt_channel_video_update/handler.main
    timeout: 600
    package:
      include:
        - src/lambda/batch_yt_channel_video_update/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    # events:
    #   - schedule: cron(30 * * * ? *)
  batch_tver_video_update:
    handler: src/lambda/batch_tver_video_update/handler.main
    timeout: 600
    package:
      include:
        - src/lambda/batch_tver_video_update/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - schedule: cron(30 23 * * ? *)
    layers:
      - { Ref: UtilsLayerLambdaLayer }
      - arn:aws:lambda:ap-northeast-1:770693421928:layer:Klayers-python38-beautifulsoup4:13
  get_tver_channel:
    handler: src/lambda/get_tver_channel/handler.main
    package:
      include:
        - src/lambda/get_tver_channel/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    layers:
      - { Ref: UtilsLayerLambdaLayer }
    events:
      - http:
          # ?n=n
          path: /videos/tver/{attribute}
          method: get
          cors: true
      - http:
          path: /videos/tver/{attribute}
          method: head
          cors: true
resources:
  Resources:
    vrcVideoTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.vrc_video_table}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: video_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: video_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
    # 動画設置用S3
    ContentsS3:
      Type: AWS::S3::Bucket
      DeletionPolicy: Retain
      Properties:
        AccessControl: Private
        BucketName: ${self:custom.contents_bucket}
    # ナゲットポリシー
    ContentsS3Policy:
      Type: AWS::S3::BucketPolicy
      Properties:
        Bucket:
          Ref: ContentsS3
        PolicyDocument:
          Statement:
            - Effect: Allow
              Principal:
                AWS:
                  Fn::Join:
                    - " "
                    - - "arn:aws:iam::cloudfront:user/CloudFront Origin Access Identity"
                      - Ref: StaticCloudFrontOriginAccessIdentity
              Action: s3:GetObject
              Resource:
                Fn::Join:
                  - "/"
                  - - Fn::GetAtt:
                        - ContentsS3
                        - Arn
                    - "*"
    # CDNのやつ
    ContentsCloudFront:
      Type: AWS::CloudFront::Distribution
      Properties:
        DistributionConfig:
          Enabled: true
          Comment: "Delivery static contents"
          DefaultRootObject: index.html
          HttpVersion: http2
          PriceClass: PriceClass_200 # 日本が含まってるやつ
          CustomErrorResponses:
            - ErrorCode: 403
              ResponseCode: 200
              ResponsePagePath: /error.mp4
            - ErrorCode: 404
              ResponseCode: 200
              ResponsePagePath: /error.mp4
          Origins:
            - Id: S3Origin
              DomainName:
                Fn::GetAtt:
                  - ContentsS3
                  - DomainName
              S3OriginConfig:
                OriginAccessIdentity:
                  Fn::Join:
                    - "/"
                    - - origin-access-identity/cloudfront
                      - Ref: StaticCloudFrontOriginAccessIdentity
          DefaultCacheBehavior:
            AllowedMethods:
              - HEAD
              - GET
            CachedMethods:
              - HEAD
              - GET
            Compress: false
            DefaultTTL: 10
            MaxTTL: 10
            MinTTL: 10
            ForwardedValues:
              QueryString: false
            SmoothStreaming: false
            TargetOriginId: S3Origin
            ViewerProtocolPolicy: https-only
    # OAI
    StaticCloudFrontOriginAccessIdentity:
      Type: AWS::CloudFront::CloudFrontOriginAccessIdentity
      Properties:
        CloudFrontOriginAccessIdentityConfig:
          Comment:
            Ref: AWS::StackName
  Outputs:
    ContentsCloudFrontUrl:
      Value:
        Fn::Join:
          - ""
          - - "https://"
            - Fn::GetAtt:
                - ContentsCloudFront
                - DomainName
