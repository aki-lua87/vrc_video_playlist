service: vrc-video-api

frameworkVersion: "2"

plugins:
  - serverless-python-requirements

custom:
  s3_bucket: ${env:S3_PUBLIC_BUCKET}
  # gss_api_url: ${env:GSS_API_URL}
  my_url: https://vrc.akakitune87.net
  video_list_url: http://net.akakitune87.public.s3-website-ap-northeast-1.amazonaws.com
  vrc_video_table: ${self:service}-${opt:stage}-table
  pythonRequirements:
    dockerizePip: true
    dockerImage: lambci/lambda:build-python3.8
    useStaticCache: false
    useDownloadCache: false

provider:
  name: aws
  runtime: python3.8
  provider: ${opt:stage}
  lambdaHashingVersion: 20201221
  region: ap-northeast-1
  role: ${env:LAMBDA_IAM}
  timeout: 30
  logRetentionInDays: 14
  tracing:
    apiGateway: true
    lambda: true

package:
  individually: true
  exclude:
    - node_modules/**
    - doc/**
    - .gitignore
    - package-lock.json
    - requirements.txt
    - serverless.yml
    - .env

functions:
  # 登録
  post_yt_channel_regist:
    handler: src/lambda/post_yt_channel_regist/handler.main
    package:
      include:
        - src/lambda/post_yt_channel_regist/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          path: /video/yt/channel/regist
          method: post
          cors: true
  # 動画取得
  get_yt_channel:
    handler: src/lambda/get_yt_channel/handler.main
    package:
      include:
        - src/lambda/get_yt_channel/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - http:
          # ?n=n
          path: /videos/yt/ch/{channel_id}
          method: get
          cors: true
      - http:
          path: /videos/yt/ch/{channel_id}
          method: head
          cors: true
  # リスト取得
  get_yt_channel_list:
    handler: src/lambda/get_yt_channel_list/handler.main
    timeout: 30
    package:
      include:
        - src/lambda/get_yt_channel_list/handler.py
      exclude:
        - src/**
    environment:
      S3_PUBLIC_BUCKET: ${self:custom.s3_bucket}
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      # 非LambdaProxy
      - http:
          integration: lambda
          path: /videos/yt/chlist/{channel_id}
          method: get
          response:
            headers:
              Content-Type: "'binary/octet-stream'"
            contentHandling: CONVERT_TO_BINARY
  # yt channel自動更新batch
  batch_yt_channel_video_update:
    handler: src/lambda/batch_yt_channel_video_update/handler.main
    timeout: 600
    package:
      include:
        - src/lambda/batch_yt_channel_video_update/handler.py
      exclude:
        - src/**
    environment:
      VRC_VIDEO_TABLE: ${self:custom.vrc_video_table}
    events:
      - schedule: cron(30 * * * ? *)

resources:
  Resources:
    vrcVideoTable:
      Type: "AWS::DynamoDB::Table"
      Properties:
        TableName: ${self:custom.vrc_video_table}
        AttributeDefinitions:
          - AttributeName: user_id
            AttributeType: S
          - AttributeName: video_id
            AttributeType: S
        KeySchema:
          - AttributeName: user_id
            KeyType: HASH
          - AttributeName: video_id
            KeyType: RANGE
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
